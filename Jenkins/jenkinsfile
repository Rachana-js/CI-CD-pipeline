pipeline {
    parameters {
        choice(name: 'terraformAction', choices: ['apply', 'destroy'], description: 'Choose your Terraform action to perform')
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    agent any

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'new-project-1', url: 'https://github.com/Rachana-js/CI-CD-pipeline.git'
            }
        }

        stage('Plan') {
            steps {
                sh '''
                cd Terraform 
                pwd
                terraform init
                terraform plan -out tfplan
                terraform show -no-color tfplan > tfplan.txt
                '''
            }
        }

        stage('Approval') {
            steps {
                script {
                    def plan = readFile 'Terraform/tfplan.txt'
                    input message: "Do you want to proceed with the Terraform action?",
                          parameters: [text(name: 'Plan', description: 'Please review the plan:', defaultValue: plan)]
                }
            }
        }

        stage('Apply/Destroy') {
            when {
                expression {
                    return params.terraformAction == 'apply' || params.terraformAction == 'destroy'
                }
            }
            steps {
                script {
                    if (params.terraformAction == 'apply') {
                        sh '''
                        cd Terraform
                        terraform apply -input=false tfplan
                        '''
                    } else if (params.terraformAction == 'destroy') {
                        sh '''
                        cd Terraform
                        terraform destroy -auto-approve
                        '''
                    }
                }
            }
        }
    }
}
